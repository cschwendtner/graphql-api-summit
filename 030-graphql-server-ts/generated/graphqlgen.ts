// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Book } from "../models/book";
import { Author } from "../models/author";
import { MyContext } from "../context";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsBook {
    id: number;
  }

  export type BooksResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: MyContext,
        info: GraphQLResolveInfo
      ) => Array<Book | null> | null | Promise<Array<Book | null> | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => Array<Book | null> | null | Promise<Array<Book | null> | null>;
      };

  export type BookResolver =
    | ((
        parent: undefined,
        args: ArgsBook,
        ctx: MyContext,
        info: GraphQLResolveInfo
      ) => Book | null | Promise<Book | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsBook,
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => Book | null | Promise<Book | null>;
      };

  export interface Type {
    books:
      | ((
          parent: undefined,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => Array<Book | null> | null | Promise<Array<Book | null> | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: MyContext,
            info: GraphQLResolveInfo
          ) => Array<Book | null> | null | Promise<Array<Book | null> | null>;
        };

    book:
      | ((
          parent: undefined,
          args: ArgsBook,
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => Book | null | Promise<Book | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsBook,
            ctx: MyContext,
            info: GraphQLResolveInfo
          ) => Book | null | Promise<Book | null>;
        };
  }
}

export namespace BookResolvers {
  export const defaultResolvers = {
    id: (parent: Book) => parent.id,
    title: (parent: Book) => parent.title
  };

  export type IdResolver =
    | ((
        parent: Book,
        args: {},
        ctx: MyContext,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Book,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type TitleResolver =
    | ((
        parent: Book,
        args: {},
        ctx: MyContext,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Book,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type AuthorResolver =
    | ((
        parent: Book,
        args: {},
        ctx: MyContext,
        info: GraphQLResolveInfo
      ) => Author | null | Promise<Author | null>)
    | {
        fragment: string;
        resolve: (
          parent: Book,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => Author | null | Promise<Author | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Book,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Book,
            args: {},
            ctx: MyContext,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    title:
      | ((
          parent: Book,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Book,
            args: {},
            ctx: MyContext,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    author:
      | ((
          parent: Book,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => Author | null | Promise<Author | null>)
      | {
          fragment: string;
          resolve: (
            parent: Book,
            args: {},
            ctx: MyContext,
            info: GraphQLResolveInfo
          ) => Author | null | Promise<Author | null>;
        };
  }
}

export namespace AuthorResolvers {
  export const defaultResolvers = {
    id: (parent: Author) => parent.id,
    firstName: (parent: Author) => parent.firstName,
    lastName: (parent: Author) => parent.lastName
  };

  export type IdResolver =
    | ((
        parent: Author,
        args: {},
        ctx: MyContext,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: Author,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export type FirstNameResolver =
    | ((
        parent: Author,
        args: {},
        ctx: MyContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Author,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type LastNameResolver =
    | ((
        parent: Author,
        args: {},
        ctx: MyContext,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Author,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: Author,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: Author,
            args: {},
            ctx: MyContext,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };

    firstName:
      | ((
          parent: Author,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Author,
            args: {},
            ctx: MyContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    lastName:
      | ((
          parent: Author,
          args: {},
          ctx: MyContext,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Author,
            args: {},
            ctx: MyContext,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Book: BookResolvers.Type;
  Author: AuthorResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
